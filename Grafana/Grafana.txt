Grafana:
- Can consume time-series metric data
- Data source must be configure separately
- Each data has its own query editor
- Supports data sources:
	- Graphite
	- InfluxDB
	- OpenTSBD
	- Prometheus
	- Elasticsearch
	- MySQL
	- PostgreSQL
	- Microsoft SQL Server
	- AWS CloudWatch

Query Editor - to build one or more queries in your time-series database
its allows to compound queries

Query editors are used on what Grafana refers to as a panel.
A panel is the basic visualization building block in Grafana.
Allows to visualize metric data. 
Seven panel types:	
	- graph
	- singlestat
	- dashboard list
	- alert list
	- heatmap
	- table (text blocks)

Row:
	- logical group of panels
	- set width, scales with your browser
	- can collapse/uncollapse

Dashboard:
	- a set one or more panels
	- organized into one or more rows
 	- time picker
	- can be named, tagged, shared

Example of use: play.grafana.org


-------------------------
Installation of Grafana |
-------------------------
install with doc: https://grafana.com/docs/grafana/latest/setup-grafana/installation/debian/

sudo systemctl start grafana-server.service
sudo systemctl status grafana-server.service
# Enable grafana to run when system boots up:
sudo systemctl enable grafana-server

# Run grafana docker container:
sudo docker run -d -p 3000:3000 grafana/grafana

Grafana configuration file: /etc/grafana/grafana.ini
- set to false 'allow_sign_up' field
- disable anonymous access [auth.anonymous] enabled = False

----------------------------------------------------------

Adding data source to Grafana:
sudo docker volume create --name=grafana-volume
sudo docker-compose up -d

---------------------------------------------------------

sudo docker run -id -p 8000:8000 -p 3000:3000 -p 8125:8125/udp kamon/grafana_graphite


---------------------------------------------------------
Grafana panels types
---------------------------------------------------------

Singlestat
	One main summary statistic for a series
	Reduces the eries into a single number
	Thresholds
	Gauges (how high the value is)
	
Table
	Desplay the result of a query
	One row = one datapoint
	Possible to merge multiple queries into one table
	Formatting options (date, value, colors)

Dasboard list
	Display list of dynamic links to other dashboards
	Updates automatically
	
Text block
	Information/description panels for dashboards
	Supports markdown, HTML and plain text

Heatmap
	View histogram over time

Alert list
	Display dashboard alerts

---------------------------------

Set up Grafana for high availability
- use an external database
- dealing with user sessions

By default Grafana uses like SQLite database to store dashboards, users and other information.
SQLite is a type of embedded database, which means that it doesn't have a separate server process to instantiate when a database is created. 
grafana.db in var lib Grafana directory when Grafana is installed. 
Resolves:
- create a database (MySQL, PostgreSQL)
- configure grafana to use this database

User session managment
Two options:
- sticky sessions
	session data will be stored on disk on our load balancer and all traffic for one
	user will always be sent to the same server
	are easier to implement
	default option in grafana
- stateless sessions
	user's session is stored in an external datasource such as Redis or MySQL
	load balancer can send a user to any grafana instance for any request without 
	that user needing to login on each Grafana separately
	make a better user experience
	easy to add and remove grafana server to the load balancer without impacting 
	a user experience


Clients connect via load balancer which routes traffic between various Grafana instances.


----------------------

Multiple queries

SLA - Service Level Agreements (company prommising clients performance characteristics of 
	a system)
KPI - Key performance indicators (critical metric to determinge the health of a system)


